
Last.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000536  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  00000536  000005ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000004c  00800064  00800064  000005ce  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005ce  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000600  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  0000063c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000bfe  00000000  00000000  000006e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007a3  00000000  00000000  000012e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000061b  00000000  00000000  00001a85  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b4  00000000  00000000  000020a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005e3  00000000  00000000  00002254  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000395  00000000  00000000  00002837  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00002bcc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__vector_9>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 9c 01 	jmp	0x338	; 0x338 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__vector_15>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e3       	ldi	r30, 0x36	; 54
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 36       	cpi	r26, 0x64	; 100
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 e6       	ldi	r26, 0x64	; 100
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 3b       	cpi	r26, 0xB0	; 176
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 96 01 	call	0x32c	; 0x32c <main>
  8a:	0c 94 99 02 	jmp	0x532	; 0x532 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <getTime>:
static uint8_t  pin_states[_SAMPLES_NUM];
static uint32_t time_snap[_SAMPLES_NUM];
static uint32_t ovcounter = 0;
 
 
static uint32_t getTime(void){
  92:	cf 92       	push	r12
  94:	df 92       	push	r13
  96:	ef 92       	push	r14
  98:	ff 92       	push	r15
	uint8_t xl = TCNT1L;
  9a:	8c b5       	in	r24, 0x2c	; 44
	uint32_t x = TCNT1H;
  9c:	cd b4       	in	r12, 0x2d	; 45
  9e:	d1 2c       	mov	r13, r1
  a0:	e1 2c       	mov	r14, r1
  a2:	f1 2c       	mov	r15, r1
	x = x << 8;	//65535
  a4:	fe 2c       	mov	r15, r14
  a6:	ed 2c       	mov	r14, r13
  a8:	dc 2c       	mov	r13, r12
  aa:	cc 24       	eor	r12, r12
	x |= xl;
  ac:	c8 2a       	or	r12, r24
	x += ovcounter*65535;
  ae:	20 91 6c 00 	lds	r18, 0x006C	; 0x80006c <ovcounter>
  b2:	30 91 6d 00 	lds	r19, 0x006D	; 0x80006d <ovcounter+0x1>
  b6:	40 91 6e 00 	lds	r20, 0x006E	; 0x80006e <ovcounter+0x2>
  ba:	50 91 6f 00 	lds	r21, 0x006F	; 0x80006f <ovcounter+0x3>
  be:	af ef       	ldi	r26, 0xFF	; 255
  c0:	bf ef       	ldi	r27, 0xFF	; 255
  c2:	0e 94 59 02 	call	0x4b2	; 0x4b2 <__muluhisi3>
  c6:	6c 0d       	add	r22, r12
  c8:	7d 1d       	adc	r23, r13
  ca:	8e 1d       	adc	r24, r14
  cc:	9f 1d       	adc	r25, r15
	return x;
}
  ce:	ff 90       	pop	r15
  d0:	ef 90       	pop	r14
  d2:	df 90       	pop	r13
  d4:	cf 90       	pop	r12
  d6:	08 95       	ret

000000d8 <__vector_9>:
ISR(TIMER1_OVF_vect)
{
  d8:	1f 92       	push	r1
  da:	0f 92       	push	r0
  dc:	0f b6       	in	r0, 0x3f	; 63
  de:	0f 92       	push	r0
  e0:	11 24       	eor	r1, r1
  e2:	8f 93       	push	r24
  e4:	9f 93       	push	r25
  e6:	af 93       	push	r26
  e8:	bf 93       	push	r27
	ovcounter++;
  ea:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <ovcounter>
  ee:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <ovcounter+0x1>
  f2:	a0 91 6e 00 	lds	r26, 0x006E	; 0x80006e <ovcounter+0x2>
  f6:	b0 91 6f 00 	lds	r27, 0x006F	; 0x80006f <ovcounter+0x3>
  fa:	01 96       	adiw	r24, 0x01	; 1
  fc:	a1 1d       	adc	r26, r1
  fe:	b1 1d       	adc	r27, r1
 100:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <ovcounter>
 104:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <ovcounter+0x1>
 108:	a0 93 6e 00 	sts	0x006E, r26	; 0x80006e <ovcounter+0x2>
 10c:	b0 93 6f 00 	sts	0x006F, r27	; 0x80006f <ovcounter+0x3>
}
 110:	bf 91       	pop	r27
 112:	af 91       	pop	r26
 114:	9f 91       	pop	r25
 116:	8f 91       	pop	r24
 118:	0f 90       	pop	r0
 11a:	0f be       	out	0x3f, r0	; 63
 11c:	0f 90       	pop	r0
 11e:	1f 90       	pop	r1
 120:	18 95       	reti

00000122 <LOGIC_Init>:
 
void LOGIC_Init(void)
{
 122:	1f 93       	push	r17
 124:	cf 93       	push	r28
 126:	df 93       	push	r29
 128:	00 d0       	rcall	.+0      	; 0x12a <LOGIC_Init+0x8>
 12a:	00 d0       	rcall	.+0      	; 0x12c <LOGIC_Init+0xa>
 12c:	1f 92       	push	r1
 12e:	cd b7       	in	r28, 0x3d	; 61
 130:	de b7       	in	r29, 0x3e	; 62
	// Initialize Timer1 in normal mode with overflow interrupt
	TCCR1A = 0;
 132:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = (1 << CS10); // Set prescaler to 1
 134:	11 e0       	ldi	r17, 0x01	; 1
 136:	1e bd       	out	0x2e, r17	; 46
	TIMSK |= (1 << TOIE1); // Enable Timer1 overflow interrupt
 138:	89 b7       	in	r24, 0x39	; 57
 13a:	84 60       	ori	r24, 0x04	; 4
 13c:	89 bf       	out	0x39, r24	; 57

	// Enable global interrupts
	sei();
 13e:	78 94       	sei
	
	// fs = 8M / 1 = 8M >= 2*fm ==> fm <= 4M
	// Time =Tick time(125ns) * ticks => f of signal = 1/t

	TCNT1H = 0;
 140:	1d bc       	out	0x2d, r1	; 45
	TCNT1L = 0;
 142:	1c bc       	out	0x2c, r1	; 44
	
    /* Init UART driver. */
    UART_cfg my_uart_cfg;
    
    /* Set USART mode. */
    my_uart_cfg.UBRRL_cfg = (BAUD_RATE_VALUE)&0x00FF;
 144:	83 e3       	ldi	r24, 0x33	; 51
 146:	8a 83       	std	Y+2, r24	; 0x02
    my_uart_cfg.UBRRH_cfg = (((BAUD_RATE_VALUE)&0xFF00)>>8);
 148:	19 82       	std	Y+1, r1	; 0x01
    
    my_uart_cfg.UCSRA_cfg = 0;
 14a:	1b 82       	std	Y+3, r1	; 0x03
    my_uart_cfg.UCSRB_cfg = (1<<RXEN)  | (1<<TXEN) | (1<<TXCIE) | (1<<RXCIE);
 14c:	88 ed       	ldi	r24, 0xD8	; 216
 14e:	8c 83       	std	Y+4, r24	; 0x04
    my_uart_cfg.UCSRC_cfg = (1<<URSEL) | (3<<UCSZ0);
 150:	86 e8       	ldi	r24, 0x86	; 134
 152:	8d 83       	std	Y+5, r24	; 0x05
    
    UART_Init(&my_uart_cfg);
 154:	ce 01       	movw	r24, r28
 156:	01 96       	adiw	r24, 0x01	; 1
 158:	0e 94 12 02 	call	0x424	; 0x424 <UART_Init>
 
    /* Start with getting which wave to generate. */ 
    currentState = SAMPLING;   
 15c:	10 93 63 00 	sts	0x0063, r17	; 0x800063 <currentState>
	
	DDRB = 0xFF;
 160:	8f ef       	ldi	r24, 0xFF	; 255
 162:	87 bb       	out	0x17, r24	; 23
}
 164:	0f 90       	pop	r0
 166:	0f 90       	pop	r0
 168:	0f 90       	pop	r0
 16a:	0f 90       	pop	r0
 16c:	0f 90       	pop	r0
 16e:	df 91       	pop	r29
 170:	cf 91       	pop	r28
 172:	1f 91       	pop	r17
 174:	08 95       	ret

00000176 <LOGIC_MainFunction>:
static char dutyCycle[] = "0";
static char Frequency[] = "0000000";

void LOGIC_MainFunction(void)
{    
 176:	1f 93       	push	r17
 178:	cf 93       	push	r28
 17a:	df 93       	push	r29
    static volatile uint8_t samples_cnt = 0;
    static char _go_signal_buf = 'N';
	
	// Convert selected channel to an integer
	int channel = atoi(dutyCycle);
 17c:	81 e6       	ldi	r24, 0x61	; 97
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	0e 94 73 02 	call	0x4e6	; 0x4e6 <atoi>

	// Set PORTC based on the selected channel
	if (channel > 0 && channel <= 8) {
 184:	9c 01       	movw	r18, r24
 186:	21 50       	subi	r18, 0x01	; 1
 188:	31 09       	sbc	r19, r1
 18a:	28 30       	cpi	r18, 0x08	; 8
 18c:	31 05       	cpc	r19, r1
 18e:	58 f4       	brcc	.+22     	; 0x1a6 <LOGIC_MainFunction+0x30>
		PORTB = 1 << (channel - 1);
 190:	c9 01       	movw	r24, r18
 192:	21 e0       	ldi	r18, 0x01	; 1
 194:	30 e0       	ldi	r19, 0x00	; 0
 196:	a9 01       	movw	r20, r18
 198:	02 c0       	rjmp	.+4      	; 0x19e <LOGIC_MainFunction+0x28>
 19a:	44 0f       	add	r20, r20
 19c:	55 1f       	adc	r21, r21
 19e:	8a 95       	dec	r24
 1a0:	e2 f7       	brpl	.-8      	; 0x19a <LOGIC_MainFunction+0x24>
 1a2:	48 bb       	out	0x18, r20	; 24
 1a4:	02 c0       	rjmp	.+4      	; 0x1aa <LOGIC_MainFunction+0x34>
		} else {
		PORTB = 0xFF; // Default value for an invalid channel
 1a6:	8f ef       	ldi	r24, 0xFF	; 255
 1a8:	88 bb       	out	0x18, r24	; 24
	LCD_vSend_string(Frequency);
}*/
    // Main function must have two states,
    // First state is command parsing and waveform selection.
    // second state is waveform executing.
    switch(currentState)
 1aa:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <currentState>
 1ae:	81 30       	cpi	r24, 0x01	; 1
 1b0:	d1 f0       	breq	.+52     	; 0x1e6 <LOGIC_MainFunction+0x70>
 1b2:	30 f0       	brcs	.+12     	; 0x1c0 <LOGIC_MainFunction+0x4a>
 1b4:	82 30       	cpi	r24, 0x02	; 2
 1b6:	f1 f1       	breq	.+124    	; 0x234 <LOGIC_MainFunction+0xbe>
 1b8:	83 30       	cpi	r24, 0x03	; 3
 1ba:	09 f4       	brne	.+2      	; 0x1be <LOGIC_MainFunction+0x48>
 1bc:	73 c0       	rjmp	.+230    	; 0x2a4 <LOGIC_MainFunction+0x12e>
 1be:	b2 c0       	rjmp	.+356    	; 0x324 <LOGIC_MainFunction+0x1ae>
    {
        case MONITOR:
        {
            LOGIC_DDR = 0;
 1c0:	1a ba       	out	0x1a, r1	; 26
            logic_port_pre_state = logic_port_state;
 1c2:	40 91 a2 00 	lds	r20, 0x00A2	; 0x8000a2 <logic_port_state>
 1c6:	50 91 a3 00 	lds	r21, 0x00A3	; 0x8000a3 <logic_port_state+0x1>
            logic_port_state     = LOGIC_PORT; 
 1ca:	89 b3       	in	r24, 0x19	; 25
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	90 93 a3 00 	sts	0x00A3, r25	; 0x8000a3 <logic_port_state+0x1>
 1d2:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <logic_port_state>
            currentState = (logic_port_pre_state != logic_port_state) ? SAMPLING : MONITOR;
 1d6:	21 e0       	ldi	r18, 0x01	; 1
 1d8:	48 17       	cp	r20, r24
 1da:	59 07       	cpc	r21, r25
 1dc:	09 f4       	brne	.+2      	; 0x1e0 <LOGIC_MainFunction+0x6a>
 1de:	20 e0       	ldi	r18, 0x00	; 0
 1e0:	20 93 63 00 	sts	0x0063, r18	; 0x800063 <currentState>
            break;
 1e4:	9f c0       	rjmp	.+318    	; 0x324 <LOGIC_MainFunction+0x1ae>
        }
        case SAMPLING:
        {
			time_snap[samples_cnt]  = getTime();
 1e6:	c0 91 6b 00 	lds	r28, 0x006B	; 0x80006b <samples_cnt.1990>
 1ea:	d0 e0       	ldi	r29, 0x00	; 0
 1ec:	0e 94 49 00 	call	0x92	; 0x92 <getTime>
 1f0:	cc 0f       	add	r28, r28
 1f2:	dd 1f       	adc	r29, r29
 1f4:	cc 0f       	add	r28, r28
 1f6:	dd 1f       	adc	r29, r29
 1f8:	c0 59       	subi	r28, 0x90	; 144
 1fa:	df 4f       	sbci	r29, 0xFF	; 255
 1fc:	68 83       	st	Y, r22
 1fe:	79 83       	std	Y+1, r23	; 0x01
 200:	8a 83       	std	Y+2, r24	; 0x02
 202:	9b 83       	std	Y+3, r25	; 0x03
            // DO here sampling.
            LOGIC_DDR = 0;
 204:	1a ba       	out	0x1a, r1	; 26
            pin_states[samples_cnt] = logic_port_state;
 206:	e0 91 6b 00 	lds	r30, 0x006B	; 0x80006b <samples_cnt.1990>
 20a:	f0 e0       	ldi	r31, 0x00	; 0
 20c:	e8 56       	subi	r30, 0x68	; 104
 20e:	ff 4f       	sbci	r31, 0xFF	; 255
 210:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <logic_port_state>
 214:	80 83       	st	Z, r24
            
            // Increment sample count.
            samples_cnt++;
 216:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <samples_cnt.1990>
 21a:	8f 5f       	subi	r24, 0xFF	; 255
 21c:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <samples_cnt.1990>
 
            // Start sending the collected _SAMPLES_NUM samples.
            currentState = (samples_cnt >= _SAMPLES_NUM) ? SENDING : MONITOR;
 220:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <samples_cnt.1990>
 224:	8a 30       	cpi	r24, 0x0A	; 10
 226:	10 f0       	brcs	.+4      	; 0x22c <LOGIC_MainFunction+0xb6>
 228:	82 e0       	ldi	r24, 0x02	; 2
 22a:	01 c0       	rjmp	.+2      	; 0x22e <LOGIC_MainFunction+0xb8>
 22c:	80 e0       	ldi	r24, 0x00	; 0
 22e:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <currentState>
            break;
 232:	78 c0       	rjmp	.+240    	; 0x324 <LOGIC_MainFunction+0x1ae>
        }
        case SENDING:
        {
			samples_cnt = 0;
 234:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <samples_cnt.1990>
            // For _SAMPLES_NUM samples send the construct the buffer.
            static uint8_t _sample_buf[FULL_SAMPLE_CNT];
            for(uint8_t i = 0; i < _SAMPLES_NUM; ++i)
 238:	10 e0       	ldi	r17, 0x00	; 0
 23a:	32 c0       	rjmp	.+100    	; 0x2a0 <LOGIC_MainFunction+0x12a>
            {
                // Construct the buffer.
                
                // Add buffer marker
                _sample_buf[MARKER_START] = '@';
 23c:	a4 e6       	ldi	r26, 0x64	; 100
 23e:	b0 e0       	ldi	r27, 0x00	; 0
 240:	80 e4       	ldi	r24, 0x40	; 64
 242:	8c 93       	st	X, r24
 
                // Add pin value.
                _sample_buf[_SAMPLE_PIN]  = pin_states[i];
 244:	e1 2f       	mov	r30, r17
 246:	f0 e0       	ldi	r31, 0x00	; 0
 248:	cf 01       	movw	r24, r30
 24a:	88 56       	subi	r24, 0x68	; 104
 24c:	9f 4f       	sbci	r25, 0xFF	; 255
 24e:	ec 01       	movw	r28, r24
 250:	88 81       	ld	r24, Y
 252:	11 96       	adiw	r26, 0x01	; 1
 254:	8c 93       	st	X, r24
 256:	11 97       	sbiw	r26, 0x01	; 1
 
                // Add time snap value.
                _sample_buf[_SAMPLE_TIME + 0] = ((time_snap[i] & 0xFF000000) >> 24);
 258:	ee 0f       	add	r30, r30
 25a:	ff 1f       	adc	r31, r31
 25c:	ee 0f       	add	r30, r30
 25e:	ff 1f       	adc	r31, r31
 260:	e0 59       	subi	r30, 0x90	; 144
 262:	ff 4f       	sbci	r31, 0xFF	; 255
 264:	80 81       	ld	r24, Z
 266:	91 81       	ldd	r25, Z+1	; 0x01
 268:	22 81       	ldd	r18, Z+2	; 0x02
 26a:	33 81       	ldd	r19, Z+3	; 0x03
 26c:	12 96       	adiw	r26, 0x02	; 2
 26e:	3c 93       	st	X, r19
 270:	12 97       	sbiw	r26, 0x02	; 2
                _sample_buf[_SAMPLE_TIME + 1] = ((time_snap[i] & 0x00FF0000) >> 16);
 272:	13 96       	adiw	r26, 0x03	; 3
 274:	2c 93       	st	X, r18
 276:	13 97       	sbiw	r26, 0x03	; 3
                _sample_buf[_SAMPLE_TIME + 2] = ((time_snap[i] & 0x0000FF00) >> 8);
 278:	14 96       	adiw	r26, 0x04	; 4
 27a:	9c 93       	st	X, r25
 27c:	14 97       	sbiw	r26, 0x04	; 4
                _sample_buf[_SAMPLE_TIME + 3] = ((time_snap[i] & 0x000000FF) >> 0);
 27e:	15 96       	adiw	r26, 0x05	; 5
 280:	8c 93       	st	X, r24
 282:	15 97       	sbiw	r26, 0x05	; 5
 
                _sample_buf[MARKER_END]   = ';';
 284:	8b e3       	ldi	r24, 0x3B	; 59
 286:	16 96       	adiw	r26, 0x06	; 6
 288:	8c 93       	st	X, r24
 28a:	16 97       	sbiw	r26, 0x06	; 6
 
                // Send sample.
                UART_SendPayload(_sample_buf, FULL_SAMPLE_CNT);
 28c:	67 e0       	ldi	r22, 0x07	; 7
 28e:	70 e0       	ldi	r23, 0x00	; 0
 290:	cd 01       	movw	r24, r26
 292:	0e 94 1e 02 	call	0x43c	; 0x43c <UART_SendPayload>
                while (0 == UART_IsTxComplete());
 296:	0e 94 3d 02 	call	0x47a	; 0x47a <UART_IsTxComplete>
 29a:	88 23       	and	r24, r24
 29c:	e1 f3       	breq	.-8      	; 0x296 <LOGIC_MainFunction+0x120>
        case SENDING:
        {
			samples_cnt = 0;
            // For _SAMPLES_NUM samples send the construct the buffer.
            static uint8_t _sample_buf[FULL_SAMPLE_CNT];
            for(uint8_t i = 0; i < _SAMPLES_NUM; ++i)
 29e:	1f 5f       	subi	r17, 0xFF	; 255
 2a0:	1a 30       	cpi	r17, 0x0A	; 10
 2a2:	60 f2       	brcs	.-104    	; 0x23c <LOGIC_MainFunction+0xc6>
            // Trigger receiving for go signal.
            //UART_ReceivePayload(&_go_signal_buf, 1);   
        }
        case IDLE:
        {
			DDRD = 0x08;
 2a4:	88 e0       	ldi	r24, 0x08	; 8
 2a6:	81 bb       	out	0x11, r24	; 17
			PORTD = 0x08;
 2a8:	82 bb       	out	0x12, r24	; 18
			
			do{
				 UART_ReceivePayload(&_go_signal_buf, 1);
 2aa:	61 e0       	ldi	r22, 0x01	; 1
 2ac:	70 e0       	ldi	r23, 0x00	; 0
 2ae:	80 e6       	ldi	r24, 0x60	; 96
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	0e 94 30 02 	call	0x460	; 0x460 <UART_ReceivePayload>
				while(0 == UART_IsRxComplete());
 2b6:	0e 94 4b 02 	call	0x496	; 0x496 <UART_IsRxComplete>
 2ba:	88 23       	and	r24, r24
 2bc:	e1 f3       	breq	.-8      	; 0x2b6 <LOGIC_MainFunction+0x140>
			} while(_go_signal_buf != 'G');
 2be:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 2c2:	87 34       	cpi	r24, 0x47	; 71
 2c4:	91 f7       	brne	.-28     	; 0x2aa <LOGIC_MainFunction+0x134>
            currentState = MONITOR;
 2c6:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <currentState>
			DDRD = 0x08;
 2ca:	88 e0       	ldi	r24, 0x08	; 8
 2cc:	81 bb       	out	0x11, r24	; 17
			PORTD = 0x08;
 2ce:	82 bb       	out	0x12, r24	; 18
			UART_ReceivePayload(&dutyCycle, 1); 
 2d0:	61 e0       	ldi	r22, 0x01	; 1
 2d2:	70 e0       	ldi	r23, 0x00	; 0
 2d4:	81 e6       	ldi	r24, 0x61	; 97
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	0e 94 30 02 	call	0x460	; 0x460 <UART_ReceivePayload>
			
			
            if(currentState == MONITOR)
 2dc:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <currentState>
 2e0:	81 11       	cpse	r24, r1
 2e2:	20 c0       	rjmp	.+64     	; 0x324 <LOGIC_MainFunction+0x1ae>
            {
                // TODO: Place your code here to reset the timer value.
				TCNT1H = 0;
 2e4:	1d bc       	out	0x2d, r1	; 45
				TCNT1L = 0;
 2e6:	1c bc       	out	0x2c, r1	; 44
				ovcounter = 0;
 2e8:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <ovcounter>
 2ec:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <ovcounter+0x1>
 2f0:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <ovcounter+0x2>
 2f4:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <ovcounter+0x3>
				for (int i = 0; i < _SAMPLES_NUM; i++) {
 2f8:	80 e0       	ldi	r24, 0x00	; 0
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	10 c0       	rjmp	.+32     	; 0x31e <LOGIC_MainFunction+0x1a8>
					pin_states[i] = 0;
 2fe:	fc 01       	movw	r30, r24
 300:	e8 56       	subi	r30, 0x68	; 104
 302:	ff 4f       	sbci	r31, 0xFF	; 255
 304:	10 82       	st	Z, r1
					time_snap[i] = 0;
 306:	fc 01       	movw	r30, r24
 308:	ee 0f       	add	r30, r30
 30a:	ff 1f       	adc	r31, r31
 30c:	ee 0f       	add	r30, r30
 30e:	ff 1f       	adc	r31, r31
 310:	e0 59       	subi	r30, 0x90	; 144
 312:	ff 4f       	sbci	r31, 0xFF	; 255
 314:	10 82       	st	Z, r1
 316:	11 82       	std	Z+1, r1	; 0x01
 318:	12 82       	std	Z+2, r1	; 0x02
 31a:	13 82       	std	Z+3, r1	; 0x03
            {
                // TODO: Place your code here to reset the timer value.
				TCNT1H = 0;
				TCNT1L = 0;
				ovcounter = 0;
				for (int i = 0; i < _SAMPLES_NUM; i++) {
 31c:	01 96       	adiw	r24, 0x01	; 1
 31e:	8a 30       	cpi	r24, 0x0A	; 10
 320:	91 05       	cpc	r25, r1
 322:	6c f3       	brlt	.-38     	; 0x2fe <LOGIC_MainFunction+0x188>
 
            break;
        }
        default: {/* Do nothing.*/}
    }
}
 324:	df 91       	pop	r29
 326:	cf 91       	pop	r28
 328:	1f 91       	pop	r17
 32a:	08 95       	ret

0000032c <main>:



int main(void) {

	LOGIC_Init();
 32c:	0e 94 91 00 	call	0x122	; 0x122 <LOGIC_Init>

	sei();
 330:	78 94       	sei
	
	while (1)
	{
		LOGIC_MainFunction();
 332:	0e 94 bb 00 	call	0x176	; 0x176 <LOGIC_MainFunction>
 336:	fd cf       	rjmp	.-6      	; 0x332 <main+0x6>

00000338 <__vector_13>:
 338:	1f 92       	push	r1
 33a:	0f 92       	push	r0
 33c:	0f b6       	in	r0, 0x3f	; 63
 33e:	0f 92       	push	r0
 340:	11 24       	eor	r1, r1
 342:	2f 93       	push	r18
 344:	3f 93       	push	r19
 346:	4f 93       	push	r20
 348:	5f 93       	push	r21
 34a:	8f 93       	push	r24
 34c:	9f 93       	push	r25
 34e:	ef 93       	push	r30
 350:	ff 93       	push	r31
 352:	f8 94       	cli
 354:	8c b1       	in	r24, 0x0c	; 12
 356:	40 91 a4 00 	lds	r20, 0x00A4	; 0x8000a4 <rx_cnt>
 35a:	50 91 a5 00 	lds	r21, 0x00A5	; 0x8000a5 <rx_cnt+0x1>
 35e:	20 91 a6 00 	lds	r18, 0x00A6	; 0x8000a6 <rx_len>
 362:	30 91 a7 00 	lds	r19, 0x00A7	; 0x8000a7 <rx_len+0x1>
 366:	42 17       	cp	r20, r18
 368:	53 07       	cpc	r21, r19
 36a:	b0 f4       	brcc	.+44     	; 0x398 <__vector_13+0x60>
 36c:	80 32       	cpi	r24, 0x20	; 32
 36e:	a1 f0       	breq	.+40     	; 0x398 <__vector_13+0x60>
 370:	20 91 a4 00 	lds	r18, 0x00A4	; 0x8000a4 <rx_cnt>
 374:	30 91 a5 00 	lds	r19, 0x00A5	; 0x8000a5 <rx_cnt+0x1>
 378:	e0 91 a8 00 	lds	r30, 0x00A8	; 0x8000a8 <rx_buffer>
 37c:	f0 91 a9 00 	lds	r31, 0x00A9	; 0x8000a9 <rx_buffer+0x1>
 380:	e2 0f       	add	r30, r18
 382:	f3 1f       	adc	r31, r19
 384:	80 83       	st	Z, r24
 386:	80 91 a4 00 	lds	r24, 0x00A4	; 0x8000a4 <rx_cnt>
 38a:	90 91 a5 00 	lds	r25, 0x00A5	; 0x8000a5 <rx_cnt+0x1>
 38e:	01 96       	adiw	r24, 0x01	; 1
 390:	90 93 a5 00 	sts	0x00A5, r25	; 0x8000a5 <rx_cnt+0x1>
 394:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <rx_cnt>
 398:	78 94       	sei
 39a:	ff 91       	pop	r31
 39c:	ef 91       	pop	r30
 39e:	9f 91       	pop	r25
 3a0:	8f 91       	pop	r24
 3a2:	5f 91       	pop	r21
 3a4:	4f 91       	pop	r20
 3a6:	3f 91       	pop	r19
 3a8:	2f 91       	pop	r18
 3aa:	0f 90       	pop	r0
 3ac:	0f be       	out	0x3f, r0	; 63
 3ae:	0f 90       	pop	r0
 3b0:	1f 90       	pop	r1
 3b2:	18 95       	reti

000003b4 <__vector_15>:
 3b4:	1f 92       	push	r1
 3b6:	0f 92       	push	r0
 3b8:	0f b6       	in	r0, 0x3f	; 63
 3ba:	0f 92       	push	r0
 3bc:	11 24       	eor	r1, r1
 3be:	2f 93       	push	r18
 3c0:	3f 93       	push	r19
 3c2:	8f 93       	push	r24
 3c4:	9f 93       	push	r25
 3c6:	ef 93       	push	r30
 3c8:	ff 93       	push	r31
 3ca:	f8 94       	cli
 3cc:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <tx_cnt>
 3d0:	90 91 ab 00 	lds	r25, 0x00AB	; 0x8000ab <tx_cnt+0x1>
 3d4:	01 96       	adiw	r24, 0x01	; 1
 3d6:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <tx_cnt+0x1>
 3da:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <tx_cnt>
 3de:	20 91 aa 00 	lds	r18, 0x00AA	; 0x8000aa <tx_cnt>
 3e2:	30 91 ab 00 	lds	r19, 0x00AB	; 0x8000ab <tx_cnt+0x1>
 3e6:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <tx_len>
 3ea:	90 91 ad 00 	lds	r25, 0x00AD	; 0x8000ad <tx_len+0x1>
 3ee:	28 17       	cp	r18, r24
 3f0:	39 07       	cpc	r19, r25
 3f2:	60 f4       	brcc	.+24     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 3f4:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <tx_cnt>
 3f8:	90 91 ab 00 	lds	r25, 0x00AB	; 0x8000ab <tx_cnt+0x1>
 3fc:	e0 91 ae 00 	lds	r30, 0x00AE	; 0x8000ae <tx_buffer>
 400:	f0 91 af 00 	lds	r31, 0x00AF	; 0x8000af <tx_buffer+0x1>
 404:	e8 0f       	add	r30, r24
 406:	f9 1f       	adc	r31, r25
 408:	80 81       	ld	r24, Z
 40a:	8c b9       	out	0x0c, r24	; 12
 40c:	78 94       	sei
 40e:	ff 91       	pop	r31
 410:	ef 91       	pop	r30
 412:	9f 91       	pop	r25
 414:	8f 91       	pop	r24
 416:	3f 91       	pop	r19
 418:	2f 91       	pop	r18
 41a:	0f 90       	pop	r0
 41c:	0f be       	out	0x3f, r0	; 63
 41e:	0f 90       	pop	r0
 420:	1f 90       	pop	r1
 422:	18 95       	reti

00000424 <UART_Init>:
 424:	fc 01       	movw	r30, r24
 426:	80 81       	ld	r24, Z
 428:	80 bd       	out	0x20, r24	; 32
 42a:	81 81       	ldd	r24, Z+1	; 0x01
 42c:	89 b9       	out	0x09, r24	; 9
 42e:	82 81       	ldd	r24, Z+2	; 0x02
 430:	8b b9       	out	0x0b, r24	; 11
 432:	83 81       	ldd	r24, Z+3	; 0x03
 434:	8a b9       	out	0x0a, r24	; 10
 436:	84 81       	ldd	r24, Z+4	; 0x04
 438:	80 bd       	out	0x20, r24	; 32
 43a:	08 95       	ret

0000043c <UART_SendPayload>:
 43c:	90 93 af 00 	sts	0x00AF, r25	; 0x8000af <tx_buffer+0x1>
 440:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <tx_buffer>
 444:	70 93 ad 00 	sts	0x00AD, r23	; 0x8000ad <tx_len+0x1>
 448:	60 93 ac 00 	sts	0x00AC, r22	; 0x8000ac <tx_len>
 44c:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <tx_cnt+0x1>
 450:	10 92 aa 00 	sts	0x00AA, r1	; 0x8000aa <tx_cnt>
 454:	5d 9b       	sbis	0x0b, 5	; 11
 456:	fe cf       	rjmp	.-4      	; 0x454 <UART_SendPayload+0x18>
 458:	fc 01       	movw	r30, r24
 45a:	80 81       	ld	r24, Z
 45c:	8c b9       	out	0x0c, r24	; 12
 45e:	08 95       	ret

00000460 <UART_ReceivePayload>:
 460:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <rx_buffer+0x1>
 464:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <rx_buffer>
 468:	70 93 a7 00 	sts	0x00A7, r23	; 0x8000a7 <rx_len+0x1>
 46c:	60 93 a6 00 	sts	0x00A6, r22	; 0x8000a6 <rx_len>
 470:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <rx_cnt+0x1>
 474:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <rx_cnt>
 478:	08 95       	ret

0000047a <UART_IsTxComplete>:
 47a:	40 91 aa 00 	lds	r20, 0x00AA	; 0x8000aa <tx_cnt>
 47e:	50 91 ab 00 	lds	r21, 0x00AB	; 0x8000ab <tx_cnt+0x1>
 482:	20 91 ac 00 	lds	r18, 0x00AC	; 0x8000ac <tx_len>
 486:	30 91 ad 00 	lds	r19, 0x00AD	; 0x8000ad <tx_len+0x1>
 48a:	81 e0       	ldi	r24, 0x01	; 1
 48c:	42 17       	cp	r20, r18
 48e:	53 07       	cpc	r21, r19
 490:	08 f4       	brcc	.+2      	; 0x494 <UART_IsTxComplete+0x1a>
 492:	80 e0       	ldi	r24, 0x00	; 0
 494:	08 95       	ret

00000496 <UART_IsRxComplete>:
 496:	40 91 a4 00 	lds	r20, 0x00A4	; 0x8000a4 <rx_cnt>
 49a:	50 91 a5 00 	lds	r21, 0x00A5	; 0x8000a5 <rx_cnt+0x1>
 49e:	20 91 a6 00 	lds	r18, 0x00A6	; 0x8000a6 <rx_len>
 4a2:	30 91 a7 00 	lds	r19, 0x00A7	; 0x8000a7 <rx_len+0x1>
 4a6:	81 e0       	ldi	r24, 0x01	; 1
 4a8:	42 17       	cp	r20, r18
 4aa:	53 07       	cpc	r21, r19
 4ac:	08 f4       	brcc	.+2      	; 0x4b0 <UART_IsRxComplete+0x1a>
 4ae:	80 e0       	ldi	r24, 0x00	; 0
 4b0:	08 95       	ret

000004b2 <__muluhisi3>:
 4b2:	0e 94 64 02 	call	0x4c8	; 0x4c8 <__umulhisi3>
 4b6:	a5 9f       	mul	r26, r21
 4b8:	90 0d       	add	r25, r0
 4ba:	b4 9f       	mul	r27, r20
 4bc:	90 0d       	add	r25, r0
 4be:	a4 9f       	mul	r26, r20
 4c0:	80 0d       	add	r24, r0
 4c2:	91 1d       	adc	r25, r1
 4c4:	11 24       	eor	r1, r1
 4c6:	08 95       	ret

000004c8 <__umulhisi3>:
 4c8:	a2 9f       	mul	r26, r18
 4ca:	b0 01       	movw	r22, r0
 4cc:	b3 9f       	mul	r27, r19
 4ce:	c0 01       	movw	r24, r0
 4d0:	a3 9f       	mul	r26, r19
 4d2:	70 0d       	add	r23, r0
 4d4:	81 1d       	adc	r24, r1
 4d6:	11 24       	eor	r1, r1
 4d8:	91 1d       	adc	r25, r1
 4da:	b2 9f       	mul	r27, r18
 4dc:	70 0d       	add	r23, r0
 4de:	81 1d       	adc	r24, r1
 4e0:	11 24       	eor	r1, r1
 4e2:	91 1d       	adc	r25, r1
 4e4:	08 95       	ret

000004e6 <atoi>:
 4e6:	fc 01       	movw	r30, r24
 4e8:	88 27       	eor	r24, r24
 4ea:	99 27       	eor	r25, r25
 4ec:	e8 94       	clt
 4ee:	21 91       	ld	r18, Z+
 4f0:	20 32       	cpi	r18, 0x20	; 32
 4f2:	e9 f3       	breq	.-6      	; 0x4ee <atoi+0x8>
 4f4:	29 30       	cpi	r18, 0x09	; 9
 4f6:	10 f0       	brcs	.+4      	; 0x4fc <atoi+0x16>
 4f8:	2e 30       	cpi	r18, 0x0E	; 14
 4fa:	c8 f3       	brcs	.-14     	; 0x4ee <atoi+0x8>
 4fc:	2b 32       	cpi	r18, 0x2B	; 43
 4fe:	41 f0       	breq	.+16     	; 0x510 <atoi+0x2a>
 500:	2d 32       	cpi	r18, 0x2D	; 45
 502:	39 f4       	brne	.+14     	; 0x512 <atoi+0x2c>
 504:	68 94       	set
 506:	04 c0       	rjmp	.+8      	; 0x510 <atoi+0x2a>
 508:	0e 94 91 02 	call	0x522	; 0x522 <__mulhi_const_10>
 50c:	82 0f       	add	r24, r18
 50e:	91 1d       	adc	r25, r1
 510:	21 91       	ld	r18, Z+
 512:	20 53       	subi	r18, 0x30	; 48
 514:	2a 30       	cpi	r18, 0x0A	; 10
 516:	c0 f3       	brcs	.-16     	; 0x508 <atoi+0x22>
 518:	1e f4       	brtc	.+6      	; 0x520 <atoi+0x3a>
 51a:	90 95       	com	r25
 51c:	81 95       	neg	r24
 51e:	9f 4f       	sbci	r25, 0xFF	; 255
 520:	08 95       	ret

00000522 <__mulhi_const_10>:
 522:	7a e0       	ldi	r23, 0x0A	; 10
 524:	97 9f       	mul	r25, r23
 526:	90 2d       	mov	r25, r0
 528:	87 9f       	mul	r24, r23
 52a:	80 2d       	mov	r24, r0
 52c:	91 0d       	add	r25, r1
 52e:	11 24       	eor	r1, r1
 530:	08 95       	ret

00000532 <_exit>:
 532:	f8 94       	cli

00000534 <__stop_program>:
 534:	ff cf       	rjmp	.-2      	; 0x534 <__stop_program>
